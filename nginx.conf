user www-data;
worker_processes auto;
pid /run/nginx.pid;
include /etc/nginx/modules-enabled/*.conf;

events {
	worker_connections 1024;
}

http {
    include mime.types;
    default_type application/octet-stream;
    sendfile on;
    server {
        listen 80;
        server_name localhost 127.0.0.1;

        location / {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $remote_addr;
            # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_pass       http://kibana:5601;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            
            # See the authorization header below?
            # It is the base 64 encoding of "username:password", your kibana auth.
            # Now, if you go over to your terminal and do the obvious, which is to
            # type echo "username:password" | base64
            # you really do get your encoding!
            # but one interesting thing is that it also includes '\n' at the end
            # Yeah...
            # I spent a day fixing this... 
            # If you open up javascript console in the browser and type 
            # btoa('user:pass'), you get the right encoding. Just a head's up for you
            # Source: https://discuss.elastic.co/t/embed-kibana-7-3-1-in-iframe-behind-nginx/197481
            
            proxy_set_header Authorization "Basic ??"; # base64-encoded username:password to pass in header
            # == PUT AUTH TOKEN HERE INSTEAD OF ?? ==
        }
        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root html;
        }
    }
}